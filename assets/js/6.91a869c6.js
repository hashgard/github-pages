(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{208:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),a("p",[e._v("Supporting code can be found in the "),a("a",{attrs:{href:"https://gitlab.hashgard.com/hashgard/hashgard/tree/master/networks",target:"_blank",rel:"noopener noreferrer"}},[e._v("networks directory"),a("OutboundLink")],1),e._v(" and additionally the "),a("code",[e._v("local")]),e._v(" or "),a("code",[e._v("remote")]),e._v(" sub-directories.")]),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),a("p",[e._v("The same images can be used to build your own docker-compose stack.")]),e._v(" "),e._m(7),e._v(" "),a("p",[e._v("This guide helps you create a single validator node that runs a network locally for testing and other development related uses.")]),e._v(" "),e._m(8),e._v(" "),a("ul",[a("li",[a("router-link",{attrs:{to:"./installation.html"}},[e._v("Install gaia")])],1),e._v(" "),a("li",[a("a",{attrs:{href:"https://stedolan.github.io/jq/download/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Install "),a("code",[e._v("jq")]),a("OutboundLink")],1),e._v(" (optional)")])]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._m(11),e._v(" "),e._m(12),e._v(" "),a("p",[e._v("From the "),a("a",{attrs:{href:"https://gitlab.hashgard.com/hashgard/hashgard/tree/master/networks/local",target:"_blank",rel:"noopener noreferrer"}},[e._v("networks/local directory"),a("OutboundLink")],1),e._v(":")]),e._v(" "),e._m(13),e._v(" "),a("ul",[a("li",[a("router-link",{attrs:{to:"./installation.html"}},[e._v("Install gaia")])],1),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.docker.com/engine/installation/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Install docker"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.docker.com/compose/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Install docker-compose"),a("OutboundLink")],1)])]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._m(17),e._v(" "),a("p",[e._v("To start a 4 node testnet run:")]),e._v(" "),e._m(18),a("p",[e._v("This command creates a 4-node network using the hashgardnode image.\nThe ports for each node are found in this table:")]),e._v(" "),e._m(19),e._v(" "),a("p",[e._v("To update the binary, just rebuild it and restart the nodes:")]),e._v(" "),e._m(20),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),a("p",[e._v("Now that accounts exists, you may create new accounts and send those accounts\nfunds!")]),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),a("p",[e._v("If you have multiple binaries with different names, you can specify which one to run with the BINARY environment variable. The path of the binary is relative to the attached volume. For example:")]),e._v(" "),e._m(33),e._m(34),e._v(" "),a("p",[e._v("The following should be run from the "),a("a",{attrs:{href:"https://gitlab.hashgard.com/hashgard/hashgard/tree/master/networks",target:"_blank",rel:"noopener noreferrer"}},[e._v("networks directory"),a("OutboundLink")],1),e._v(".")]),e._v(" "),e._m(35),e._v(" "),a("p",[e._v("Automated deployments are done using "),a("a",{attrs:{href:"https://www.terraform.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Terraform"),a("OutboundLink")],1),e._v(" to create servers on AWS then\n"),a("a",{attrs:{href:"http://www.ansible.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ansible"),a("OutboundLink")],1),e._v(" to create and manage testnets on those servers.")]),e._v(" "),e._m(36),e._v(" "),a("ul",[a("li",[e._v("Install "),a("a",{attrs:{href:"https://www.terraform.io/downloads.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Terraform"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"http://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ansible"),a("OutboundLink")],1),e._v(" on a Linux machine.")]),e._v(" "),a("li",[e._v("Create an "),a("a",{attrs:{href:"https://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("AWS API token"),a("OutboundLink")],1),e._v(" with EC2 create capability.")]),e._v(" "),a("li",[e._v("Create SSH keys")])]),e._v(" "),e._m(37),e._m(38),e._v(" "),e._m(39),e._v(" "),e._m(40),a("p",[e._v("The testnet name is what's going to be used in --chain-id, while the cluster name is the administrative tag in AWS for the servers. The code will create SERVERS amount of servers in each availability zone up to the number of REGION_LIMITs, starting at us-east-2. (us-east-1 is excluded.) The below BaSH script does the same, but sometimes it's more comfortable for input.")]),e._v(" "),e._m(41),e._m(42),e._v(" "),e._m(43),e._m(44),e._v(" "),e._m(45),e._m(46),e._v(" "),a("p",[e._v("You can ship logs to Logz.io, an Elastic stack (Elastic search, Logstash and Kibana) service provider. You can set up your nodes to log there automatically. Create an account and get your API key from the notes on "),a("a",{attrs:{href:"https://app.logz.io/#/dashboard/data-sources/Filebeat",target:"_blank",rel:"noopener noreferrer"}},[e._v("this page"),a("OutboundLink")],1),e._v(", then:")]),e._v(" "),e._m(47),e._m(48),e._v(" "),a("p",[e._v("You can install the DataDog agent with:")]),e._v(" "),e._m(49)])}),[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"deploy-your-own-hashgard-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deploy-your-own-hashgard-testnet","aria-hidden":"true"}},[this._v("#")]),this._v(" Deploy Your Own Hashgard Testnet")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This document describes 3 ways to setup a network of "),t("code",[this._v("hashgard")]),this._v(" nodes, each serving a different usecase:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("Single-node, local, manual testnet")]),this._v(" "),t("li",[this._v("Multi-node, local, automated testnet")]),this._v(" "),t("li",[this._v("Multi-node, remote, automated testnet")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("NOTE: The "),t("code",[this._v("remote")]),this._v(" network bootstrapping may be out of sync with the latest releases and is not to be relied upon.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"available-docker-images"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#available-docker-images","aria-hidden":"true"}},[this._v("#")]),this._v(" Available Docker images")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In case you need to use or deploy gaia as a container you could skip the "),t("code",[this._v("build")]),this._v(" steps and use the official images, $TAG stands for the version you are interested in:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("docker run -it -v ~/.hashgard:/root/.hashgard -v ~/.hashgardcli:/root/.hashgardcli tendermint:$TAG hashgard init")])]),this._v(" "),t("li",[t("code",[this._v("docker run -it -p 26657:26657 -p 26656:26656 -v ~/.hashgard:/root/.hashgard -v ~/.hashgardcli:/root/.hashgardcli tendermint:$TAG hashgard start")])]),this._v(" "),t("li",[this._v("...")]),this._v(" "),t("li",[t("code",[this._v("docker run -it -v ~/.hashgard:/root/.hashgard -v ~/.hashgardcli:/root/.hashgardcli tendermint:$TAG hashgardcli version")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"single-node-local-manual-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#single-node-local-manual-testnet","aria-hidden":"true"}},[this._v("#")]),this._v(" Single-node, Local, Manual Testnet")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"requirements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requirements","aria-hidden":"true"}},[this._v("#")]),this._v(" Requirements")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"create-genesis-file-and-start-the-network"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-genesis-file-and-start-the-network","aria-hidden":"true"}},[this._v("#")]),this._v(" Create Genesis File and Start the Network")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can run all of these commands from your home directory")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Initialize the genesis.json file that will help you to bootstrap the network")]),e._v("\nhashgard init --chain-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("testing testing\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create a key to hold your validator account")]),e._v("\nhashgardcli keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" validator\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Add that key into the genesis.app_state.accounts array in the genesis file")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# NOTE: this command lets you set the number of coins. Make sure this account has some coins")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# with the genesis.app_state.staking.params.bond_denom denom, the default is staking")]),e._v("\nhashgard add-genesis-account "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("hashgardcli keys show validator -a"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" 1000000000stake,1000000000validatortoken\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Generate the transaction that creates your validator")]),e._v("\nhashgard gentx --name validator\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Add the generated bonding transaction to the genesis file")]),e._v("\nhashgard collect-gentxs\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Now its safe to start `hashgard`")]),e._v("\nhashgard start\n")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("This setup puts all the data for "),a("code",[e._v("hashgard")]),e._v(" in "),a("code",[e._v("~/.hashgard")]),e._v(". You can examine the genesis file you created at "),a("code",[e._v("~/.hashgard/config/genesis.json")]),e._v(". With this configuration "),a("code",[e._v("hashgardcli")]),e._v(" is also ready to use and has an account with tokens (both staking and custom).")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"multi-node-local-automated-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multi-node-local-automated-testnet","aria-hidden":"true"}},[this._v("#")]),this._v(" Multi-node, Local, Automated Testnet")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"requirements-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requirements-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Requirements")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build","aria-hidden":"true"}},[this._v("#")]),this._v(" Build")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Build the "),t("code",[this._v("hashgard")]),this._v(" binary (linux) and the "),t("code",[this._v("tendermint/hashgardnode")]),this._v(" docker image required for running the "),t("code",[this._v("localnet")]),this._v(" commands. This binary will be mounted into the container and can be updated rebuilding the image, so you only need to build the image once.")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Work from the SDK repo")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$GOPATH")]),e._v("/src/gitlab.hashgard.com/hashgard/hashgard\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Build the linux binary in ./build")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" build-linux\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Build tendermint/hashgardnode image")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" build-docker-hashgardnode\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"run-your-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-your-testnet","aria-hidden":"true"}},[this._v("#")]),this._v(" Run Your Testnet")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("make localnet-start\n")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("table",[a("thead",[a("tr",[a("th",[e._v("Node ID")]),e._v(" "),a("th",[e._v("P2P Port")]),e._v(" "),a("th",[e._v("RPC Port")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("gaianode0")])]),e._v(" "),a("td",[a("code",[e._v("26656")])]),e._v(" "),a("td",[a("code",[e._v("26657")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("gaianode1")])]),e._v(" "),a("td",[a("code",[e._v("26659")])]),e._v(" "),a("td",[a("code",[e._v("26660")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("gaianode2")])]),e._v(" "),a("td",[a("code",[e._v("26661")])]),e._v(" "),a("td",[a("code",[e._v("26662")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("gaianode3")])]),e._v(" "),a("td",[a("code",[e._v("26663")])]),e._v(" "),a("td",[a("code",[e._v("26664")])])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("make build-linux localnet-start\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration","aria-hidden":"true"}},[this._v("#")]),this._v(" Configuration")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("The "),a("code",[e._v("make localnet-start")]),e._v(" creates files for a 4-node testnet in "),a("code",[e._v("./build")]),e._v(" by\ncalling the "),a("code",[e._v("hashgard testnet")]),e._v(" command. This outputs a handful of files in the\n"),a("code",[e._v("./build")]),e._v(" directory:")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ tree -L "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" build/\nbuild/\n├── hashgardcli\n├── hashgard\n├── gentxs\n│   ├── node0.json\n│   ├── node1.json\n│   ├── node2.json\n│   └── node3.json\n├── node0\n│   ├── hashgardcli\n│   │   ├── key_seed.json\n│   │   └── keys\n│   └── hashgard\n│       ├── "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("hashgard.log}")]),e._v("\n│       ├── config\n│       └── data\n├── node1\n│   ├── hashgardcli\n│   │   └── key_seed.json\n│   └── hashgard\n│       ├── "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("hashgard.log}")]),e._v("\n│       ├── config\n│       └── data\n├── node2\n│   ├── hashgardcli\n│   │   └── key_seed.json\n│   └── hashgard\n│       ├── "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("hashgard.log}")]),e._v("\n│       ├── config\n│       └── data\n└── node3\n    ├── hashgardcli\n    │   └── key_seed.json\n    └── hashgard\n        ├── "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("hashgard.log}")]),e._v("\n        ├── config\n        └── data\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Each "),t("code",[this._v("./build/nodeN")]),this._v(" directory is mounted to the "),t("code",[this._v("/hashgard")]),this._v(" directory in each container.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"logging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logging","aria-hidden":"true"}},[this._v("#")]),this._v(" Logging")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Logs are saved under each "),t("code",[this._v("./build/nodeN/hashgard/gaia.log")]),this._v(". You can also watch logs\ndirectly via Docker, for example:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("docker logs -f hashgardnode0\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"keys-accounts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keys-accounts","aria-hidden":"true"}},[this._v("#")]),this._v(" Keys & Accounts")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("To interact with "),t("code",[this._v("hashgardcli")]),this._v(" and start querying state or creating txs, you use the\n"),t("code",[this._v("hashgardcli")]),this._v(" directory of any given node as your "),t("code",[this._v("home")]),this._v(", for example:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[this._v("hashgardcli keys list --home ./build/node0/hashgardcli\n")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[a("strong",[e._v("Note")]),e._v(": Each node's seed is located at "),a("code",[e._v("./build/nodeN/hashgardcli/key_seed.json")]),e._v(" and can be restored to the CLI using the "),a("code",[e._v("hashgardcli keys add --restore")]),e._v(" command")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"special-binaries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#special-binaries","aria-hidden":"true"}},[this._v("#")]),this._v(" Special Binaries")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("# Run with custom binary\nBINARY=gaiafoo make localnet-start\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"multi-node-remote-automated-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multi-node-remote-automated-testnet","aria-hidden":"true"}},[this._v("#")]),this._v(" Multi-Node, Remote, Automated Testnet")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"terraform-ansible"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#terraform-ansible","aria-hidden":"true"}},[this._v("#")]),this._v(" Terraform & Ansible")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites","aria-hidden":"true"}},[this._v("#")]),this._v(" Prerequisites")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('export AWS_ACCESS_KEY_ID="2345234jk2lh4234"\nexport AWS_SECRET_ACCESS_KEY="234jhkg234h52kh4g5khg34"\nexport TESTNET_NAME="remotenet"\nexport CLUSTER_NAME= "remotenetvalidators"\nexport SSH_PRIVATE_FILE="$HOME/.ssh/id_rsa"\nexport SSH_PUBLIC_FILE="$HOME/.ssh/id_rsa.pub"\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("These will be used by both "),t("code",[this._v("terraform")]),this._v(" and "),t("code",[this._v("ansible")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"create-a-remote-network"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-a-remote-network","aria-hidden":"true"}},[this._v("#")]),this._v(" Create a Remote Network")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("SERVERS=1 REGION_LIMIT=1 make validators-start\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('./new-testnet.sh "$TESTNET_NAME" "$CLUSTER_NAME" 1 1\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"quickly-see-the-status-endpoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quickly-see-the-status-endpoint","aria-hidden":"true"}},[this._v("#")]),this._v(" Quickly see the /status Endpoint")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("make validators-status\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"delete-servers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delete-servers","aria-hidden":"true"}},[this._v("#")]),this._v(" Delete Servers")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("make validators-stop\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"logging-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logging-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Logging")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('yum install systemd-devel || echo "This will only work on RHEL-based systems."\napt-get install libsystemd-dev || echo "This will only work on Debian-based systems."\n\ngo get github.com/mheese/journalbeat\nansible-playbook -i inventory/digital_ocean.py -l remotenet logzio.yml -e LOGZIO_TOKEN=ABCDEFGHIJKLMNOPQRSTUVWXYZ012345\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"monitoring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#monitoring","aria-hidden":"true"}},[this._v("#")]),this._v(" Monitoring")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("make datadog-install\n")])])])}],!1,null,null,null);t.default=r.exports}}]);